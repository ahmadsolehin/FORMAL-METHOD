<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Global declarations 

// Pointer as an integer 
typedef int Pointer;

// Emulate the null pointer
const Pointer null = -1;

// Fist and last elements of the Queue
Pointer first=null, last=null; 

// Model of the  Memory as a Pool of nodes (containing a pointer to next Node)

// Total size of the Memory Pool
const int MPSize = 10;

// Every pointer will contain an integer adress of the next element  
Pointer MPool[MPSize] = {null, null, null, null, null, null, null, null, null, null};

// Current number of blockes, allocated by all processes
int n=0;

// Implemenation of logic of "classical" Enqueue
bool Enqueue1 ()
{
 // Out of memory
 if (n == MPSize) return false;

 // Memory still available

 // Initial logic
 // if (last != null) last.next = x;
 //  else first = x;
 // last  = x;  

 // Model of Enqueue
 // Use of first pointer in reality not needed, because we always start from 0
 if (last != null) MPool[last] = n;
  else first = n;
 last  = n;  
 
 // Memory management. Increment ambout of allocated blocks
 n++;

 return true; 
}

// T as an Integer 
typedef int T;

// Atomic Compare and Swap operation
// Q: How garantee atomicity at the level of UPPAAL code?
T CAS (T &amp;t, T expected, T replacement) 
{ 
 T old = t;
 if(old == expected) t = replacement;
 return old;
}

/* Initial logic
void Enqueue2 ( Node  x )
{
 Node prevLast;
 x.next = null;

 do{ prevLast = CAS(last, null, null); } 
  while(CAS(last, prevLast, x) != prevLast);

 if(prevLast != null) CAS(prevLast.next, null, x);
  else CAS(first, null, x);
} */


// Implemenation of logic of lock free Enqueue
bool Enqueue2 ()
{
 Pointer prevLast;

 // Memory management. Out of memory
 if (n == MPSize) return false;
  
 do{ prevLast = CAS(last, null, null); } 
  while(CAS(last, prevLast, n) != prevLast);

 if(prevLast != null) CAS(MPool[prevLast], null, n);
  else CAS(first, null, n);

 // Memory management. Increment amount of allocated blocks
 n++;

 return true; 
}







</declaration>
	<template>
		<name x="5" y="5">LockedProc</name>
		<declaration>bool Guard;</declaration>
		<location id="id0" x="-1576" y="-384">
			<name x="-1592" y="-424">Start</name>
		</location>
		<location id="id1" x="-1296" y="-384">
			<urgent/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-1456" y="-336">Guard</label>
			<nail x="-1440" y="-344"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-1504" y="-472">Guard = Enqueue1()</label>
			<nail x="-1448" y="-440"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">LockFreeProc</name>
		<declaration>bool Guard;</declaration>
		<location id="id2" x="-1576" y="-384">
			<name x="-1592" y="-424">Start</name>
		</location>
		<location id="id3" x="-1296" y="-384">
			<urgent/>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-1456" y="-336">Guard</label>
			<nail x="-1440" y="-344"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="-1520" y="-464">Guard := Enqueue2()</label>
			<nail x="-1448" y="-440"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// System can be composed from LockedProc 
 p0 = LockedProc();
 p1 = LockedProc();

// System can be composed from LockFreeProc
//p0 = LockFreeProc();
//p1 = LockFreeProc();

// List one or more processes to be composed into a system.
system p0, p1;</system>
	<queries>
	</queries>
</nta>
